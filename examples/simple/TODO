DONE Better input events
DONE Camera move


**** Layers
	* Un shader/une passe par process
	* Selection
	* CPU/GPU
	* Cible pour l'outil brosse:
		(texture+pipeline)

	Layers VS processes? Idem

	Interface:
		- draw(Texture, Rect)

	Contraintes pour un shader de layer:
		#include "layer.hpp"
		main => layerMain(in image2D source, in image2D mask) 

Différence entre:
- process
	formule de rendu d'un pixel
	i.e. fonction f(x,y,ldotn,ao,...) -> RGB
	ils peuvent être superposés à l'aide de layers (blending)

	un même process peut être lié à différents paramètres
	i.e. Blur 2D lié:
		- à L.N
		- à la position (XY) 

- layers
	associé à un process

- g-buffers/parameter maps



*** Zoom/move canvas (not on the mesh)

* Save camera parameters

* Image filters
	glsl, defines, input, output, params
	multipass (blur) 

* chargement d'un mesh depuis un fichier

* remove tool enum
	* dynamically add tools to the UI

* Layer masks

* Load / save

* Undo list

* Tools and brushes

* Better UI toolkit 
	* more practical
	* extendable by tools
	* declarative (data binding)
	* less barriers to modification
	* Actuellement: pour ajouter un element, il faut modifier 2+ endroits (membre dans Ui, widget dans ui.render)
		idéalement: une seule ligne, localement dans la fonction/objet qui utilise l'élement

* Separate rendering from event handling
	* rendering must happen during a specific period

* Redraw scene only if parameters have changed
	=> Observables for scene parameters
		* camera
		* light position

* pour les effets non portés par la géométrie: distance fields
ex: glow
	DF: distance aux aplats d'une certaine intensité 
	calcul en temps réel?
ex: shading:
	DF à la shadow shape?
	f(distance) -> intensité

* multi-parameter mapping 

* afficher une grille ou des axes


* Ne pas utiliser des observers avec [this] dans la lambda capture
	=> crash quand l'objet est déplacé

* Trouver une meilleure solution pour les observables avec états




UI bindings:

* Simple à utiliser
	idéalement: instanciation d'un objet
* Reactif
	observables
* Bindings bidirectionnels
* RAII
	Les widgets disparaissent quand l'objet est détruit
* Popups?
* Bindings de listes?
	idéalement: juste un std::vector ou un std::list
	Pb: la liste peut changer, mais on ne veut pas passer l'intégralité du vecteur en copie
		les éléments individuels peuvent changer -> quelle UI?
			-> une liste d'UI elements?
			-> ou: UI element qui pointe vers un élement d'une liste?
* Ownership?
	UI element
	VS
	extérieur (par reference)
	=> UI element /= element

* Différence entre UI element et valeur
	=> UI element owns its state ?

* Combo box == enum class

ui::element
	ui::reactive<type>
		-> can subscribe
		-> forward to utils::reactive<type, binding>
		ui::slider<type>
		ui::text<type>
		ui::number_input<type>
		ui::extras::histogram<type>
	ui::reactive_collection<container<type> >
		-> forward to utils::reactive_collection<collection<type>,binding>
		- on_value_added
		- on_value_changed
		ui::list<type>
		ui::combo<enum class type>: must have min/max
			combo.set_name(s)(...)


